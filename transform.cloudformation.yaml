Resources:
  TransformRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: {Service: lambda.amazonaws.com}
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: Access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: logs:*
            Resource: "*"
          - Action:
            - s3:PutObject
            - s3:GetObject
            Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::net-mozaws-dev-${AWS::Region}-logging/*
            - !Sub arn:aws:s3:::net-mozaws-stage-${AWS::Region}-logging/*
            - !Sub arn:aws:s3:::net-mozaws-prod-${AWS::Region}-logging/*
  TransformFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import os, json, re, boto3, urllib, gzip

          s3 = boto3.client('s3')


          def handle(key, bucket):
              print('{"input":"s3://%s/%s"}' % (bucket, key))
              base, _, log, date, hour = re.match(r'^.*/((logging.s3.)?(.*)-[0-9]+-(20[0-9]{2}-[0-9]{2}-[0-9]{2})-([0-9]{2})-.*.gz)$', key).groups()
              app, err, src_path, err_path, dst_paths = log.split('.', 1)[0], False, '/tmp/'+base, '/tmp/err+'+base, []
              if key.endswith('.gz'):
                  open = gzip.open
              s3.download_file(bucket, key, src_path)
              with open(src_path, 'r') as s, open(err_path, 'w') as e:
                  for l in s:
                      try:
                          try:
                            schema, log = re.match(r'^([A-Za-z0-9-]+):(\{.*\})$', l).groups()
                            json.loads(log)
                          except:
                              continue  # drop invalid lines
                          if schema not in dst_paths:
                              path = '/tmp/dst+%s+%s' % (schema, base)
                              dst_paths[schema] = [path, open(path, 'w')]
                          dst_paths[schema][1].write(json.dumps(log, separators=(',', ':')) + '\n')
                      except:
                          e.write(l)
                          err = True
              if err:
                  err_key = 'lambda/transform-errors/%s/log=%s/date=%s/hour=%s/%s' % (app, log, date, hour, base)
                  s3.upload_file(err_path, bucket, err_key)
                  print('{"errors":"s3://%s/%s"}' % (bucket, err_key))
              for schema in dst_paths:
                  path, fp = dst_paths[schema]
                  fp.close()
                  dst_key = 'json/%s/log=%s/schema=%s/date=%s/hour=%s/%s' % (app, schema, log, date, hour, base)
                  if schema is None:
                      dst_key = 'json/%s/log=%s/date=%s/hour=%s/%s' % (app, log, date, hour, base)
                  s3.upload_file(path, bucket + '-parquet', dst_key)
                  s3.upload_file(path, bucket, dst_key)
                  print('{"output":"s3://%s/%s"}' % (bucket, dst_key))
              os.remove(src_path)
              os.remove(err_path)
              map(os.remove, [d[1] for d in dst_paths.values()])


          def lambda_handler(event, context):
              for record in event['Records']:
                  if 'object' in record['s3']:
                      handle(urllib.unquote(record['s3']['object']['key']), record['s3']['bucket']['name'])
      Environment:
        Variables:
          PATH_SCHEMA_MAP: '{"v2/links/view": "view"}'
          SCHEMAS: |-
            {
              "None": {
                "Timestamp": "",
                "Fields": {
                  "agent": "",
                  "method": "",
                  "path": "",
                  "user_agent_browser": "",
                  "user_agent_os": "",
                  "user_agent_version": 0
                }
              },
              "view": {
                "Timestamp": "",
                "Fields": {
                  "agent": "",
                  "method": "",
                  "path": "",
                  "user_agent_browser": "",
                  "user_agent_os": "",
                  "user_agent_version": 0,
                  "view": 0,
                  "locale": "",
                  "tiles": [{
                    "id": 0,
                    "pin": false,
                    "pos": 0,
                    "score": 0,
                    "ur": ""
                  }]
                }
              }
            }
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt Role.Arn
      Runtime: python2.7
      Timeout: 300
Outputs:
  TransformFunction:
    Value: !GetAtt TransformFunction.Arn
    Export: {Name: !Sub "${AWS::StackName}-TransformFunction"}
